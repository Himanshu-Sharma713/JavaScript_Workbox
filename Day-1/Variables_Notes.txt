var, let and const in javascript
================================

1. var
-------------
Definition:
Introduced in ES5 (and earlier), var is used to declare variables globally or function-scoped.

Key Points:

Scope: Function-scoped (not block-scoped).

Hoisting: Variables declared with var are hoisted to the top of their scope and initialized with undefined.

Redeclaration: Allowed.

Reassignment: Allowed.

Example:

javascript
Copy
Edit
function example() {
  console.log(a); // undefined (hoisted)
  var a = 10;
  console.log(a); // 10
}
example();


2. let
----------
Definition:
Introduced in ES6 (2015), let allows you to declare block-scoped variables.

Key Points:

Scope: Block-scoped ({}).

Hoisting: Hoisted but not initialized â†’ causes Temporal Dead Zone error if accessed before declaration.

Redeclaration: Not allowed in the same scope.

Reassignment: Allowed.

Example:

javascript
Copy
Edit
{
  let x = 5;
  console.log(x); // 5
}
// console.log(x); // Error: x is not defined


3. const
---------
Definition:
Also introduced in ES6, const is used to declare block-scoped constants.

Key Points:

Scope: Block-scoped.

Hoisting: Same TDZ (Temporal Dead Zone) behavior as let.

Redeclaration: Not allowed in the same scope.

Reassignment: Not allowed (value cannot be reassigned).

Mutable Objects: If the value is an object/array, the contents can still be changed.

Example:

javascript
Copy
Edit
const PI = 3.1416;
// PI = 3; // Error: Assignment to constant variable

const arr = [1, 2, 3];
arr.push(4); // Allowed (modifying contents)
console.log(arr); // [1, 2, 3, 4]
Comparison Table
Feature	var	let	const
Scope	Function	Block	Block
Hoisting	Yes, with undefined	Yes, TDZ	Yes, TDZ
Redeclaration	Yes	No	No
Reassignment	Yes	Yes	No
Introduced in	ES5 & before	ES6	ES6

ðŸ’¡ Rule of Thumb for Modern JS:

Use const by default.

Use let if you need to reassign.

Avoid var unless working with old code.
